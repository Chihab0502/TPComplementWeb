{"ast":null,"code":"import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport teamService from \"@/services/team.service\";\nimport heroService from \"@/services/hero.service\";\nimport orgService from \"@/services/org.service\";\nVue.config.devtools = true;\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    orgPassword: \"\",\n    heroesAliases: [],\n    currentHero: null,\n    teams: [],\n    currentTeam: null,\n    orgNames: [],\n    currentOrg: null\n  },\n  mutations: {\n    SET_ORG_PASSWORD(state, password) {\n      state.orgPassword = password;\n    },\n    SET_HEROES_ALIASES(state, aliases) {\n      state.heroesAliases = aliases;\n    },\n    SET_CURRENT_HERO(state, hero) {\n      state.currentHero = hero;\n    },\n    SET_TEAMS(state, teams) {\n      state.teams = teams;\n    },\n    SET_CURRENT_TEAM(state, team) {\n      state.currentTeam = team;\n    },\n    SET_ORG_NAMES(state, names) {\n      state.orgNames = names;\n    },\n    SET_CURRENT_ORG(state, org) {\n      state.currentOrg = org;\n    }\n  },\n  actions: {\n    updateOrgPassword({\n      commit\n    }, password) {\n      commit(\"SET_ORG_PASSWORD\", password);\n    },\n    updateHeroesAliases({\n      commit\n    }, aliases) {\n      commit(\"SET_HEROES_ALIASES\", aliases);\n    },\n    setCurrentHero({\n      commit\n    }, hero) {\n      commit(\"SET_CURRENT_HERO\", hero);\n    },\n    updateTeams({\n      commit\n    }, teams) {\n      commit(\"SET_TEAMS\", teams);\n    },\n    setCurrentTeam({\n      commit\n    }, team) {\n      commit(\"SET_CURRENT_TEAM\", team);\n    },\n    updateOrgNames({\n      commit\n    }, names) {\n      commit(\"SET_ORG_NAMES\", names);\n    },\n    setCurrentOrg({\n      commit\n    }, org) {\n      commit(\"SET_CURRENT_ORG\", org);\n    },\n    // Heroes\n    fetchHeroes({\n      commit\n    }) {\n      heroService.getHeroes().then(aliases => {\n        commit(\"SET_HEROES_ALIASES\", aliases);\n      });\n    },\n    createHero({\n      dispatch\n    }, {\n      publicName,\n      realName,\n      powers\n    }) {\n      heroService.createHero(publicName, realName, powers).then(() => {\n        dispatch(\"fetchHeroes\");\n      });\n    },\n    updateHero({\n      dispatch\n    }, {\n      id,\n      publicName,\n      realName,\n      powers\n    }) {\n      heroService.updateHero(id, publicName, realName, powers).then(() => {\n        dispatch(\"fetchHeroes\");\n      });\n    },\n    fetchHeroById({\n      commit\n    }, id) {\n      heroService.getHeroById(id).then(hero => {\n        commit(\"SET_CURRENT_HERO\", hero);\n      });\n    },\n    //Teams\n    fetchTeams({\n      commit\n    }) {\n      teamService.getTeams().then(teams => {\n        commit(\"SET_TEAMS\", teams);\n      });\n    },\n    createTeam({\n      dispatch\n    }, teamName) {\n      teamService.createTeam(teamName).then(() => {\n        dispatch(\"fetchTeams\");\n      });\n    },\n    updateTeamAddHeroes({\n      dispatch\n    }, {\n      teamId,\n      addheroes\n    }) {\n      teamService.updateTeamAddHeroes(teamId, addheroes).then(() => {\n        dispatch(\"fetchTeams\");\n      });\n    },\n    updateTeamRemoveHeroes({\n      dispatch\n    }, {\n      teamId,\n      removeHeroes\n    }) {\n      teamService.updateTeamRemoveHeroes(teamId, removeHeroes).then(() => {\n        dispatch(\"fetchTeams\");\n      });\n    },\n    //Orgs\n    fetchOrgs({\n      commit\n    }) {\n      orgService.getOrg().then(organizations => {\n        commit(\"SET_ORG_NAMES\", organizations);\n      });\n    },\n    createOrg({\n      dispatch\n    }, {\n      name,\n      password\n    }) {\n      orgService.createOrg(name, password).then(() => {\n        dispatch(\"fetchOrgs\");\n      });\n    },\n    updateOrgAddTeam({\n      dispatch\n    }, {\n      idTeam\n    }) {\n      orgService.updateOrgAddTeam(this.state.orgPassword.password, idTeam).then(() => {\n        dispatch(\"fetchOrgs\");\n      });\n    },\n    updateOrgRemoveTeam({\n      dispatch\n    }, {\n      idTeam\n    }) {\n      orgService.updateOrgRemoveTeam(this.state.orgPassword.password, idTeam).then(() => {\n        dispatch(\"fetchOrgs\");\n      });\n    },\n    fetchOrgById({\n      commit\n    }, id) {\n      console.log(this.state.orgPassword);\n      orgService.getOrgById(this.state.orgPassword.password, id.id).then(organization => {\n        commit(\"SET_CURRENT_ORG\", organization);\n      });\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","teamService","heroService","orgService","config","devtools","use","Store","state","orgPassword","heroesAliases","currentHero","teams","currentTeam","orgNames","currentOrg","mutations","SET_ORG_PASSWORD","password","SET_HEROES_ALIASES","aliases","SET_CURRENT_HERO","hero","SET_TEAMS","SET_CURRENT_TEAM","team","SET_ORG_NAMES","names","SET_CURRENT_ORG","org","actions","updateOrgPassword","commit","updateHeroesAliases","setCurrentHero","updateTeams","setCurrentTeam","updateOrgNames","setCurrentOrg","fetchHeroes","getHeroes","then","createHero","dispatch","publicName","realName","powers","updateHero","id","fetchHeroById","getHeroById","fetchTeams","getTeams","createTeam","teamName","updateTeamAddHeroes","teamId","addheroes","updateTeamRemoveHeroes","removeHeroes","fetchOrgs","getOrg","organizations","createOrg","name","updateOrgAddTeam","idTeam","updateOrgRemoveTeam","fetchOrgById","console","log","getOrgById","organization"],"sources":["/Users/othmancharai/Documents/Othman_Charai/my-vue-2-project/src/store/index.js"],"sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport teamService from \"@/services/team.service\";\nimport heroService from \"@/services/hero.service\";\nimport orgService from \"@/services/org.service\";\n\nVue.config.devtools = true;\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    orgPassword: \"\",\n    heroesAliases: [],\n    currentHero: null,\n    teams: [],\n    currentTeam: null,\n    orgNames: [],\n    currentOrg: null,\n  },\n  mutations: {\n    SET_ORG_PASSWORD(state, password) {\n      state.orgPassword = password;\n    },\n    SET_HEROES_ALIASES(state, aliases) {\n      state.heroesAliases = aliases;\n    },\n    SET_CURRENT_HERO(state, hero) {\n      state.currentHero = hero;\n    },\n    SET_TEAMS(state, teams) {\n      state.teams = teams;\n    },\n    SET_CURRENT_TEAM(state, team) {\n      state.currentTeam = team;\n    },\n    SET_ORG_NAMES(state, names) {\n      state.orgNames = names;\n    },\n    SET_CURRENT_ORG(state, org) {\n      state.currentOrg = org;\n    },\n  },\n  actions: {\n    updateOrgPassword({ commit }, password) {\n      commit(\"SET_ORG_PASSWORD\", password);\n    },\n    updateHeroesAliases({ commit }, aliases) {\n      commit(\"SET_HEROES_ALIASES\", aliases);\n    },\n    setCurrentHero({ commit }, hero) {\n      commit(\"SET_CURRENT_HERO\", hero);\n    },\n    updateTeams({ commit }, teams) {\n      commit(\"SET_TEAMS\", teams);\n    },\n    setCurrentTeam({ commit }, team) {\n      commit(\"SET_CURRENT_TEAM\", team);\n    },\n    updateOrgNames({ commit }, names) {\n      commit(\"SET_ORG_NAMES\", names);\n    },\n    setCurrentOrg({ commit }, org) {\n      commit(\"SET_CURRENT_ORG\", org);\n    },\n\n    // Heroes\n    fetchHeroes({ commit }) {\n      heroService.getHeroes().then((aliases) => {\n        commit(\"SET_HEROES_ALIASES\", aliases);\n      });\n    },\n\n    createHero({ dispatch }, { publicName, realName, powers }) {\n      heroService.createHero(publicName, realName, powers).then(() => {\n        dispatch(\"fetchHeroes\");\n      });\n    },\n\n    updateHero({ dispatch }, { id, publicName, realName, powers }) {\n      heroService.updateHero(id, publicName, realName, powers).then(() => {\n        dispatch(\"fetchHeroes\");\n      });\n    },\n\n    fetchHeroById({ commit }, id) {\n      heroService.getHeroById(id).then((hero) => {\n        commit(\"SET_CURRENT_HERO\", hero);\n      });\n    },\n\n    //Teams\n    fetchTeams({ commit }) {\n      teamService.getTeams().then((teams) => {\n        commit(\"SET_TEAMS\", teams);\n      });\n    },\n\n    createTeam({ dispatch }, teamName) {\n      teamService.createTeam(teamName).then(() => {\n        dispatch(\"fetchTeams\");\n      });\n    },\n\n    updateTeamAddHeroes({ dispatch }, { teamId, addheroes }) {\n      teamService.updateTeamAddHeroes(teamId, addheroes).then(() => {\n        dispatch(\"fetchTeams\");\n      });\n    },\n\n    updateTeamRemoveHeroes({ dispatch }, { teamId, removeHeroes }) {\n      teamService.updateTeamRemoveHeroes(teamId, removeHeroes).then(() => {\n        dispatch(\"fetchTeams\");\n      });\n    },\n\n    //Orgs\n    fetchOrgs({ commit }) {\n      orgService.getOrg().then((organizations) => {\n        commit(\"SET_ORG_NAMES\", organizations);\n      });\n    },\n\n    createOrg({ dispatch }, { name,password }) {\n      orgService.createOrg(name, password).then(() => {\n        \n        dispatch(\"fetchOrgs\");\n      });\n    },\n\n    updateOrgAddTeam({ dispatch }, { idTeam }) {\n      orgService\n        .updateOrgAddTeam(this.state.orgPassword.password, idTeam)\n        .then(() => {\n          dispatch(\"fetchOrgs\");\n        });\n    },\n\n    updateOrgRemoveTeam({ dispatch }, { idTeam }) {\n      orgService\n        .updateOrgRemoveTeam(this.state.orgPassword.password, idTeam)\n        .then(() => {\n          dispatch(\"fetchOrgs\");\n        });\n    },\n\n    fetchOrgById({ commit }, id) {\n      console.log(this.state.orgPassword)\n      orgService\n        .getOrgById(this.state.orgPassword.password, id.id)\n        .then((organization) => {\n          commit(\"SET_CURRENT_ORG\", organization);\n        });\n    },\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}