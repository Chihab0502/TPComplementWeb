{"ast":null,"code":"import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport teamService from \"@/services/team.service\";\nimport heroService from \"@/services/hero.service\";\nimport orgService from \"@/services/org.service\";\nVue.config.devtools = true;\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    orgPassword: \"\",\n    heroesAliases: [],\n    currentHero: null,\n    teams: [],\n    currentTeam: null,\n    orgNames: [],\n    currentOrg: null\n  },\n  mutations: {\n    SET_ORG_PASSWORD(state, password) {\n      state.orgPassword = password;\n    },\n    SET_HEROES_ALIASES(state, aliases) {\n      state.heroesAliases = aliases;\n    },\n    SET_CURRENT_HERO(state, hero) {\n      state.currentHero = hero;\n    },\n    SET_TEAMS(state, teams) {\n      state.teams = teams;\n    },\n    SET_CURRENT_TEAM(state, team) {\n      state.currentTeam = team;\n    },\n    SET_ORG_NAMES(state, names) {\n      state.orgNames = names;\n    },\n    SET_CURRENT_ORG(state, org) {\n      state.currentOrg = org;\n    }\n  },\n  actions: {\n    updateOrgPassword({\n      commit\n    }, password) {\n      commit(\"SET_ORG_PASSWORD\", password);\n    },\n    updateHeroesAliases({\n      commit\n    }, aliases) {\n      commit(\"SET_HEROES_ALIASES\", aliases);\n    },\n    setCurrentHero({\n      commit\n    }, hero) {\n      commit(\"SET_CURRENT_HERO\", hero);\n    },\n    updateTeams({\n      commit\n    }, teams) {\n      commit(\"SET_TEAMS\", teams);\n    },\n    setCurrentTeam({\n      commit\n    }, team) {\n      commit(\"SET_CURRENT_TEAM\", team);\n    },\n    updateOrgNames({\n      commit\n    }, names) {\n      commit(\"SET_ORG_NAMES\", names);\n    },\n    setCurrentOrg({\n      commit\n    }, org) {\n      commit(\"SET_CURRENT_ORG\", org);\n    },\n    // Heroes\n    async fetchHeroes({\n      commit\n    }) {\n      const aliases = await heroService.getHeroes();\n      commit(\"SET_HEROES_ALIASES\", aliases);\n      return aliases;\n    },\n    async createHero({\n      dispatch\n    }, {\n      publicName,\n      realName,\n      powers\n    }) {\n      const response = await heroService.createHero(publicName, realName, powers);\n      dispatch(\"fetchHeroes\");\n      return response;\n    },\n    async updateHero({\n      dispatch\n    }, {\n      id,\n      publicName,\n      realName,\n      powers\n    }) {\n      const response = await heroService.updateHero(id, publicName, realName, powers);\n      await dispatch(\"fetchHeroes\");\n      return response;\n    },\n    async fetchHeroById({\n      commit\n    }, id) {\n      const response = await heroService.getHeroById(\"nous sommes mechants\", id);\n      commit(\"SET_CURRENT_HERO\", response);\n      return response;\n    },\n    //Teams\n    fetchTeams({\n      commit\n    }) {\n      teamService.getTeams().then(teams => {\n        commit(\"SET_TEAMS\", teams);\n      });\n    },\n    createTeam({\n      dispatch\n    }, teamName) {\n      teamService.createTeam(teamName.name).then(() => {\n        dispatch(\"fetchTeams\");\n      });\n    },\n    updateTeamAddHeroes({\n      dispatch\n    }, {\n      teamId,\n      addheroes\n    }) {\n      teamService.updateTeamAddHeroes(teamId, addheroes).then(() => {\n        dispatch(\"fetchTeams\");\n      });\n    },\n    updateTeamRemoveHeroes({\n      dispatch\n    }, {\n      teamId,\n      removeHeroes\n    }) {\n      teamService.updateTeamRemoveHeroes(teamId, removeHeroes).then(() => {\n        dispatch(\"fetchTeams\");\n      });\n    },\n    //Orgs\n    fetchOrgs({\n      commit\n    }) {\n      orgService.getOrg().then(organizations => {\n        commit(\"SET_ORG_NAMES\", organizations);\n      });\n    },\n    createOrg({\n      dispatch\n    }, {\n      name,\n      password\n    }) {\n      orgService.createOrg(name, password).then(() => {\n        dispatch('updateOrgPassword', password);\n        dispatch(\"fetchOrgs\");\n      });\n    },\n    updateOrgAddTeam({\n      dispatch\n    }, {\n      idTeam\n    }) {\n      orgService.updateOrgAddTeam(this.state.orgPassword.password, idTeam).then(() => {\n        dispatch(\"fetchOrgs\");\n      });\n    },\n    updateOrgRemoveTeam({\n      dispatch\n    }, {\n      idTeam\n    }) {\n      orgService.updateOrgRemoveTeam(this.state.orgPassword.password, idTeam).then(() => {\n        dispatch(\"fetchOrgs\");\n      });\n    },\n    fetchOrgById({\n      commit\n    }, id) {\n      orgService.getOrgById(\"nous sommes mechants\", id.id).then(organization => {\n        commit(\"SET_CURRENT_ORG\", organization);\n      });\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","teamService","heroService","orgService","config","devtools","use","Store","state","orgPassword","heroesAliases","currentHero","teams","currentTeam","orgNames","currentOrg","mutations","SET_ORG_PASSWORD","password","SET_HEROES_ALIASES","aliases","SET_CURRENT_HERO","hero","SET_TEAMS","SET_CURRENT_TEAM","team","SET_ORG_NAMES","names","SET_CURRENT_ORG","org","actions","updateOrgPassword","commit","updateHeroesAliases","setCurrentHero","updateTeams","setCurrentTeam","updateOrgNames","setCurrentOrg","fetchHeroes","getHeroes","createHero","dispatch","publicName","realName","powers","response","updateHero","id","fetchHeroById","getHeroById","fetchTeams","getTeams","then","createTeam","teamName","name","updateTeamAddHeroes","teamId","addheroes","updateTeamRemoveHeroes","removeHeroes","fetchOrgs","getOrg","organizations","createOrg","updateOrgAddTeam","idTeam","updateOrgRemoveTeam","fetchOrgById","getOrgById","organization"],"sources":["/Users/othmancharai/Documents/Othman_Charai/my-vue-2-project/src/store/index.js"],"sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport teamService from \"@/services/team.service\";\nimport heroService from \"@/services/hero.service\";\nimport orgService from \"@/services/org.service\";\n\nVue.config.devtools = true;\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    orgPassword: \"\",\n    heroesAliases: [],\n    currentHero: null,\n    teams: [],\n    currentTeam: null,\n    orgNames: [],\n    currentOrg: null,\n  },\n  mutations: {\n    SET_ORG_PASSWORD(state, password) {\n      state.orgPassword = password;\n    },\n    SET_HEROES_ALIASES(state, aliases) {\n      state.heroesAliases = aliases;\n    },\n    SET_CURRENT_HERO(state, hero) {\n      state.currentHero = hero;\n    },\n    SET_TEAMS(state, teams) {\n      state.teams = teams;\n    },\n    SET_CURRENT_TEAM(state, team) {\n      state.currentTeam = team;\n    },\n    SET_ORG_NAMES(state, names) {\n      state.orgNames = names;\n    },\n    SET_CURRENT_ORG(state, org) {\n      state.currentOrg = org;\n    },\n  },\n  actions: {\n    updateOrgPassword({ commit }, password) {\n      commit(\"SET_ORG_PASSWORD\", password);\n    },\n    updateHeroesAliases({ commit }, aliases) {\n      commit(\"SET_HEROES_ALIASES\", aliases);\n    },\n    setCurrentHero({ commit }, hero) {\n      commit(\"SET_CURRENT_HERO\", hero);\n    },\n    updateTeams({ commit }, teams) {\n      commit(\"SET_TEAMS\", teams);\n    },\n    setCurrentTeam({ commit }, team) {\n      commit(\"SET_CURRENT_TEAM\", team);\n    },\n    updateOrgNames({ commit }, names) {\n      commit(\"SET_ORG_NAMES\", names);\n    },\n    setCurrentOrg({ commit }, org) {\n      commit(\"SET_CURRENT_ORG\", org);\n    },\n\n    // Heroes\n    async fetchHeroes({ commit }) {\n      const aliases=await heroService.getHeroes();\n      commit(\"SET_HEROES_ALIASES\", aliases);\n      return aliases;\n    },\n\n    async createHero({ dispatch }, { publicName, realName, powers }) {\n      const response=await heroService.createHero(publicName, realName, powers);\n      dispatch(\"fetchHeroes\");\n      return response;\n    },\n\n    async updateHero({ dispatch }, { id, publicName, realName, powers }) {\n      const response=await heroService.updateHero(id, publicName, realName, powers);\n      await dispatch(\"fetchHeroes\");\n      return response;\n    },\n\n    async fetchHeroById({ commit }, id) {\n      const response=await heroService.getHeroById(\"nous sommes mechants\",id);\n      commit(\"SET_CURRENT_HERO\", response);\n      return response;\n    },\n\n    //Teams\n    fetchTeams({ commit }) {\n      teamService.getTeams().then((teams) => {\n        commit(\"SET_TEAMS\", teams);\n      });\n    },\n\n    createTeam({ dispatch }, teamName) {\n      teamService.createTeam(teamName.name).then(() => {\n        dispatch(\"fetchTeams\");\n      });\n    },\n\n    updateTeamAddHeroes({ dispatch }, { teamId, addheroes }) {\n      teamService.updateTeamAddHeroes(teamId, addheroes).then(() => {\n        dispatch(\"fetchTeams\");\n      });\n    },\n\n    updateTeamRemoveHeroes({ dispatch }, { teamId, removeHeroes }) {\n      teamService.updateTeamRemoveHeroes(teamId, removeHeroes).then(() => {\n        dispatch(\"fetchTeams\");\n      });\n    },\n\n    //Orgs\n    fetchOrgs({ commit }) {\n      orgService.getOrg().then((organizations) => {\n        commit(\"SET_ORG_NAMES\", organizations);\n      });\n    },\n\n    createOrg({ dispatch }, { name,password }) {\n      orgService.createOrg(name, password).then(() => {\n        dispatch('updateOrgPassword',password)\n        dispatch(\"fetchOrgs\");\n      });\n    },\n\n    updateOrgAddTeam({ dispatch }, { idTeam }) {\n      orgService\n        .updateOrgAddTeam(this.state.orgPassword.password, idTeam)\n        .then(() => {\n          dispatch(\"fetchOrgs\");\n        });\n    },\n\n    updateOrgRemoveTeam({ dispatch }, { idTeam }) {\n      orgService\n        .updateOrgRemoveTeam(this.state.orgPassword.password, idTeam)\n        .then(() => {\n          dispatch(\"fetchOrgs\");\n        });\n    },\n\n    fetchOrgById({ commit }, id) {\n      orgService\n        .getOrgById(\"nous sommes mechants\", id.id)\n        .then((organization) => {\n          commit(\"SET_CURRENT_ORG\", organization);\n        });\n    },\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}