{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { required, min } from \"vee-validate/dist/rules\";\nimport { extend, ValidationObserver, ValidationProvider, setInteractionMode } from \"vee-validate\";\nsetInteractionMode(\"eager\");\nextend(\"required\", {\n  ...required,\n  message: \"le champe {_field_} est obligatiore\"\n});\nextend(\"min\", {\n  ...min,\n  message: \"le champe {_field_} ne doit pas etre moin de {length} characters\"\n});\nexport default {\n  components: {\n    ValidationObserver,\n    ValidationProvider\n  },\n  data: () => ({\n    headers: [{\n      text: \"Identification\",\n      align: \"start\",\n      sortable: true,\n      value: \"_id\"\n    }, {\n      text: \"public Name\",\n      sortable: true,\n      value: \"publicName\"\n    }, {\n      text: \"real Name\",\n      sortable: true,\n      value: \"realName\"\n    }, {\n      text: \"powers\",\n      sortable: true,\n      value: \"powers\"\n    }, {\n      text: \"Actions\",\n      value: \"actions\",\n      sortable: false\n    }],\n    membersDetails: [],\n    dialog: false,\n    publicName: \"\",\n    realName: \"\",\n    powers: [],\n    heroPowers: [],\n    newPower: []\n  }),\n  mounted: function () {\n    this.fetchMembersDetails();\n    console.log(this.membersDetails);\n  },\n  computed: {\n    currentTeam: {\n      get() {\n        return this.$store.state.currentTeam;\n      },\n      set(newValue) {\n        this.$store.commit(\"setCurrentTeam\", newValue);\n      }\n    }\n  },\n  methods: {\n    getMemberDetails(memberId) {\n      return this.membersDetails.find(member => member._id === memberId) || {};\n    },\n    async fetchMembersDetails() {\n      if (this.currentTeam && this.currentTeam.members) {\n        try {\n          for (const memberId of this.currentTeam.members) {\n            const heroData = await this.$store.dispatch(\"fetchHeroById\", memberId);\n            const powerNames = heroData.data[0].powers.map(power => power.name);\n            this.membersDetails.push({\n              ...heroData.data[0],\n              powers: powerNames\n            });\n          }\n        } catch (error) {\n          console.error(\"Error fetching members details:\", error);\n        }\n      }\n    },\n    addPower() {\n      const newPower = {\n        name: this.newPower.name,\n        type: null,\n        level: 0\n      };\n      this.heroPowers.push(newPower);\n      this.newPower.name = \"\";\n    },\n    removePower(index) {\n      this.heroPowers.splice(index, 1);\n    },\n    async submit() {\n      if (!this.$refs.observer.validate()) {\n        return;\n      }\n      const heroData = {\n        publicName: this.publicName,\n        realName: this.realName,\n        powers: this.heroPowers\n      };\n      try {\n        const response = await this.$store.dispatch(\"createHero\", heroData);\n        console.log(\"Hero created successfully:\", response.data);\n        this.dialog = false;\n        this.publicName = \"\";\n        this.realName = \"\";\n        this.heroPowers = [];\n      } catch (error) {\n        console.error(\"Error creating hero:\", error);\n      }\n    }\n  },\n  watch: {\n    membersDetails(newVal) {\n      return newVal;\n    }\n  }\n};","map":{"version":3,"names":["required","min","extend","ValidationObserver","ValidationProvider","setInteractionMode","message","components","data","headers","text","align","sortable","value","membersDetails","dialog","publicName","realName","powers","heroPowers","newPower","mounted","fetchMembersDetails","console","log","computed","currentTeam","get","$store","state","set","newValue","commit","methods","getMemberDetails","memberId","find","member","_id","members","heroData","dispatch","powerNames","map","power","name","push","error","addPower","type","level","removePower","index","splice","submit","$refs","observer","validate","response","watch","newVal"],"sources":["src/components/TeamDetailsComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row justify=\"center\">\n      <v-dialog v-model=\"dialog\" persistent max-width=\"600px\">\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-btn class=\"mt-5\" color=\"primary\" dark v-bind=\"attrs\" v-on=\"on\">\n            Ajouter Noveau Membre\n          </v-btn>\n        </template>\n        <v-card>\n          <validation-observer ref=\"observer\" v-slot=\"{ invalid }\">\n            <form @submit.prevent=\"submit\">\n              <v-card-title>\n                <span class=\"text-h5\">Member information</span>\n              </v-card-title>\n              <v-card-text>\n                <v-container>\n                  <v-row>\n                    <v-col cols=\"12\">\n                      <validation-provider\n                        v-slot=\"{ errors }\"\n                        name=\"publicName\"\n                        rules=\"required\"\n                      >\n                        <v-text-field\n                          label=\"Public Name*\"\n                          :error-messages=\"errors\"\n                          v-model=\"publicName\"\n                          required\n                        >\n                        </v-text-field>\n                      </validation-provider>\n                    </v-col>\n\n                    <v-col cols=\"12\">\n                      <validation-provider\n                        v-slot=\"{ errors }\"\n                        name=\"realName\"\n                        rules=\"required\"\n                      >\n                        <v-text-field\n                          label=\"real Name*\"\n                          :error-messages=\"errors\"\n                          v-model=\"realName\"\n                          required\n                        >\n                        </v-text-field>\n                      </validation-provider>\n                    </v-col>\n\n                    <v-col cols=\"12\">\n                      <v-card-text>\n                        <v-card-subtitle>Powers (Optional)</v-card-subtitle>\n                        <v-row>\n                          <v-col cols=\"4\">\n                            <v-text-field\n                              v-model=\"powers.name\"\n                              label=\"Name\"\n                              readonly\n                            ></v-text-field>\n                          </v-col>\n                          <v-col cols=\"4\">\n                            <v-select\n                              v-model=\"powers.type\"\n                              min=\"0\"\n                              max=\"7\"\n                              label=\"Type\"\n                              required\n                            ></v-select>\n                          </v-col>\n                          <v-col cols=\"4\">\n                            <v-text-field\n                              v-model=\"powers.level\"\n                              label=\"Level (0-100)\"\n                              type=\"number\"\n                              min=\"0\"\n                              max=\"100\"\n                              required\n                            ></v-text-field>\n                          </v-col>\n                          <v-col cols=\"1\">\n                            <v-icon small @click=\"removePower(index)\">\n                              mdi-delete\n                            </v-icon>\n                          </v-col>\n                        </v-row>\n                      </v-card-text>\n                    </v-col>\n                  </v-row>\n                </v-container>\n                <small>* c-a-d champ est obligatoire</small>\n              </v-card-text>\n              <v-card-actions>\n                <v-spacer></v-spacer>\n                <v-btn color=\"blue darken-1\" text @click=\"dialog = false\">\n                  Close\n                </v-btn>\n                <v-btn\n                  type=\"submit\"\n                  :disabled=\"invalid\"\n                  color=\"blue darken-1\"\n                  text\n                >\n                  Save\n                </v-btn>\n              </v-card-actions>\n            </form>\n          </validation-observer>\n        </v-card>\n      </v-dialog>\n    </v-row>\n    <v-data-table\n      :headers=\"headers\"\n      :items=\"membersDetails\"\n      :items-per-page=\"5\"\n      class=\"elevation-1 mx-3 my-3 mt-5\"\n    >\n      <!-- eslint-disable-next-line vue/valid-v-slot -->\n      <template v-slot:item.actions=\"{ item }\">\n        <v-icon small class=\"mr-2\" @click=\"editItem(item)\"> mdi-pencil </v-icon>\n      </template>\n    </v-data-table>\n  </div>\n</template>\n\n<script>\nimport { required, min } from \"vee-validate/dist/rules\";\nimport {\n  extend,\n  ValidationObserver,\n  ValidationProvider,\n  setInteractionMode,\n} from \"vee-validate\";\nsetInteractionMode(\"eager\");\n\nextend(\"required\", {\n  ...required,\n  message: \"le champe {_field_} est obligatiore\",\n});\n\nextend(\"min\", {\n  ...min,\n  message: \"le champe {_field_} ne doit pas etre moin de {length} characters\",\n});\nexport default {\n  components: {\n    ValidationObserver,\n    ValidationProvider,\n  },\n  data: () => ({\n    headers: [\n      {\n        text: \"Identification\",\n        align: \"start\",\n        sortable: true,\n        value: \"_id\",\n      },\n      { text: \"public Name\", sortable: true, value: \"publicName\" },\n      { text: \"real Name\", sortable: true, value: \"realName\" },\n      { text: \"powers\", sortable: true, value: \"powers\" },\n      { text: \"Actions\", value: \"actions\", sortable: false },\n    ],\n    membersDetails: [],\n    dialog: false,\n    publicName: \"\",\n    realName: \"\",\n    powers: [],\n    heroPowers: [],\n    newPower: [],\n  }),\n  mounted: function () {\n    this.fetchMembersDetails();\n    console.log(this.membersDetails);\n  },\n  computed: {\n    currentTeam: {\n      get() {\n        return this.$store.state.currentTeam;\n      },\n      set(newValue) {\n        this.$store.commit(\"setCurrentTeam\", newValue);\n      },\n    },\n  },\n\n  methods: {\n    getMemberDetails(memberId) {\n      return (\n        this.membersDetails.find((member) => member._id === memberId) || {}\n      );\n    },\n    async fetchMembersDetails() {\n      if (this.currentTeam && this.currentTeam.members) {\n        try {\n          for (const memberId of this.currentTeam.members) {\n            const heroData = await this.$store.dispatch(\n              \"fetchHeroById\",\n              memberId\n            );\n            const powerNames = heroData.data[0].powers.map(\n              (power) => power.name\n            );\n            this.membersDetails.push({\n              ...heroData.data[0],\n              powers: powerNames,\n            });\n          }\n        } catch (error) {\n          console.error(\"Error fetching members details:\", error);\n        }\n      }\n    },\n\n    addPower() {\n      const newPower = {\n        name: this.newPower.name,\n        type: null,\n        level: 0,\n      };\n      this.heroPowers.push(newPower);\n      this.newPower.name = \"\";\n    },\n    removePower(index) {\n      this.heroPowers.splice(index, 1);\n    },\n    async submit() {\n      if (!this.$refs.observer.validate()) {\n        return;\n      }\n\n      const heroData = {\n        publicName: this.publicName,\n        realName: this.realName,\n        powers: this.heroPowers,\n      };\n\n      try {\n        const response = await this.$store.dispatch(\"createHero\", heroData);\n        console.log(\"Hero created successfully:\", response.data);\n        this.dialog = false;\n        this.publicName = \"\";\n        this.realName = \"\";\n        this.heroPowers = [];\n      } catch (error) {\n        console.error(\"Error creating hero:\", error);\n      }\n    },\n  },\n\n  watch: {\n    membersDetails(newVal) {\n      return newVal;\n    },\n  },\n};\n</script>\n\n<style></style>\n"],"mappings":";AA8HA,SAAAA,QAAA,EAAAC,GAAA;AACA,SACAC,MAAA,EACAC,kBAAA,EACAC,kBAAA,EACAC,kBAAA,QACA;AACAA,kBAAA;AAEAH,MAAA;EACA,GAAAF,QAAA;EACAM,OAAA;AACA;AAEAJ,MAAA;EACA,GAAAD,GAAA;EACAK,OAAA;AACA;AACA;EACAC,UAAA;IACAJ,kBAAA;IACAC;EACA;EACAI,IAAA,EAAAA,CAAA;IACAC,OAAA,GACA;MACAC,IAAA;MACAC,KAAA;MACAC,QAAA;MACAC,KAAA;IACA,GACA;MAAAH,IAAA;MAAAE,QAAA;MAAAC,KAAA;IAAA,GACA;MAAAH,IAAA;MAAAE,QAAA;MAAAC,KAAA;IAAA,GACA;MAAAH,IAAA;MAAAE,QAAA;MAAAC,KAAA;IAAA,GACA;MAAAH,IAAA;MAAAG,KAAA;MAAAD,QAAA;IAAA,EACA;IACAE,cAAA;IACAC,MAAA;IACAC,UAAA;IACAC,QAAA;IACAC,MAAA;IACAC,UAAA;IACAC,QAAA;EACA;EACAC,OAAA,WAAAA,CAAA;IACA,KAAAC,mBAAA;IACAC,OAAA,CAAAC,GAAA,MAAAV,cAAA;EACA;EACAW,QAAA;IACAC,WAAA;MACAC,IAAA;QACA,YAAAC,MAAA,CAAAC,KAAA,CAAAH,WAAA;MACA;MACAI,IAAAC,QAAA;QACA,KAAAH,MAAA,CAAAI,MAAA,mBAAAD,QAAA;MACA;IACA;EACA;EAEAE,OAAA;IACAC,iBAAAC,QAAA;MACA,OACA,KAAArB,cAAA,CAAAsB,IAAA,CAAAC,MAAA,IAAAA,MAAA,CAAAC,GAAA,KAAAH,QAAA;IAEA;IACA,MAAAb,oBAAA;MACA,SAAAI,WAAA,SAAAA,WAAA,CAAAa,OAAA;QACA;UACA,WAAAJ,QAAA,SAAAT,WAAA,CAAAa,OAAA;YACA,MAAAC,QAAA,cAAAZ,MAAA,CAAAa,QAAA,CACA,iBACAN,QACA;YACA,MAAAO,UAAA,GAAAF,QAAA,CAAAhC,IAAA,IAAAU,MAAA,CAAAyB,GAAA,CACAC,KAAA,IAAAA,KAAA,CAAAC,IACA;YACA,KAAA/B,cAAA,CAAAgC,IAAA;cACA,GAAAN,QAAA,CAAAhC,IAAA;cACAU,MAAA,EAAAwB;YACA;UACA;QACA,SAAAK,KAAA;UACAxB,OAAA,CAAAwB,KAAA,oCAAAA,KAAA;QACA;MACA;IACA;IAEAC,SAAA;MACA,MAAA5B,QAAA;QACAyB,IAAA,OAAAzB,QAAA,CAAAyB,IAAA;QACAI,IAAA;QACAC,KAAA;MACA;MACA,KAAA/B,UAAA,CAAA2B,IAAA,CAAA1B,QAAA;MACA,KAAAA,QAAA,CAAAyB,IAAA;IACA;IACAM,YAAAC,KAAA;MACA,KAAAjC,UAAA,CAAAkC,MAAA,CAAAD,KAAA;IACA;IACA,MAAAE,OAAA;MACA,UAAAC,KAAA,CAAAC,QAAA,CAAAC,QAAA;QACA;MACA;MAEA,MAAAjB,QAAA;QACAxB,UAAA,OAAAA,UAAA;QACAC,QAAA,OAAAA,QAAA;QACAC,MAAA,OAAAC;MACA;MAEA;QACA,MAAAuC,QAAA,cAAA9B,MAAA,CAAAa,QAAA,eAAAD,QAAA;QACAjB,OAAA,CAAAC,GAAA,+BAAAkC,QAAA,CAAAlD,IAAA;QACA,KAAAO,MAAA;QACA,KAAAC,UAAA;QACA,KAAAC,QAAA;QACA,KAAAE,UAAA;MACA,SAAA4B,KAAA;QACAxB,OAAA,CAAAwB,KAAA,yBAAAA,KAAA;MACA;IACA;EACA;EAEAY,KAAA;IACA7C,eAAA8C,MAAA;MACA,OAAAA,MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}